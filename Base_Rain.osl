// BASE Rain - Compiled by Mads Dr√∏schler 4. September 2018.
// Added various settings to UI.
// License: https://creativecommons.org/licenses/by-nc-sa/3.0/
// I can't remember the GL fragment authors name.

float fract ( float x ) 
{
	return x - floor ( x) ;
}
	
vector fract ( vector x ) 
{
	return x - floor ( x) ;
}

vector randVec(float inVal, float Shuffle)
{
	return vector(fract(sin(dot(vector(inVal*1.1,2352.75053,0) ,vector(12.9898,78.233,0))) * 43758.5453)-0.5,
    fract(sin(dot(vector(Shuffle, inVal,0) ,vector(27.2311,31.651,0))) * 65161.6513)-0.5,0);
}

float randFloat(vector inVal)
{
    return fract(sin(dot(vector(inVal[0], inVal[1],0) ,vector(89.4516,35.516,0))) * 13554.3651);
}

shader Base_Rain( 

	point Po = P,
 	float Time = 0,
 	float rainSpeed = 0.6,
  	float numRings = 3.0,
  	float expansionSpeed = 4.0,
   float numIterations = 4.,
   float strength = 0.3,
   float Shuffle = 0,
  	output vector Out = 0, 
)
{
	 vector Scale = vector (0);
    float zoom = 0.6+0.46*sin(Time*0.6);
    zoom = 0.9+pow(((Scale[0]+Scale[1]))*1.,3.0);
    float sharpness = 4.5*zoom; 
    sharpness = 6;  
  	 float newTime = Time*rainSpeed;
    vector uv;
    vector uvStep;
    for(float iterations = 0.; iterations < numIterations; iterations++){
        for(float xpos = -1.;xpos<=1.;xpos++){
            for(float ypos = -1.;ypos<=1.;ypos++){
                uv = Po;
                uv /= zoom;
                uv += iterations*vector(3.21,2.561,0);
                uv += vector(xpos*0.3333,ypos*0.3333,0);
                uvStep = (ceil((uv*1.0-vector(.5,.5,0)))/1.);
                uvStep += vector(xpos,ypos,0)*100.;
                uv = vector(fract(uv[0]+0.5)-.5,fract(uv[1]+0.5)-.5,0);

                float timeRand = randFloat(uvStep);
                float timeLoop = fract(newTime+timeRand);
                float timeIter = floor(newTime+timeRand);

                float ringMap = sharpness*9.*distance(uv, randVec(timeIter+uvStep[0]+uvStep[1],Shuffle)*0.5);
                float clampMinimum = -(1.+((numRings-1.)*2.0));
                ringMap = clamp((ringMap-expansionSpeed*sharpness*(timeLoop))+1., clampMinimum, 1.);

                float rings = (cos((ringMap+newTime)*M_PI)+1.0)/2.;
                rings *= pow(1.-timeLoop,2.);
                float bigRing = sin((ringMap-clampMinimum)/(1.-clampMinimum)*M_PI);
                float result = rings * bigRing;
                Out += vector(result)*strength;
            }
        }
    }
}
