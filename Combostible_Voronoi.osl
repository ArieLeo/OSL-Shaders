// Compiled by Mads Dr√∏schler 5.11.2018
// I cant remember the GL authors name.
// License: https://creativecommons.org/licenses/by-nc-sa/3.0/

	vector fract ( vector x ) {
	return x - floor ( x ) ; }
	
		vector firePalette(float i){

    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).
    vector L = vector(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).
    L = pow(L,vector(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);
    return 1.0-exp(-5e8/L); // Exposure level. Set to "50." For "70," change the "5" to a "7," etc.
}

vector hash33(vector p){ 
    
    float n = sin(dot(p, vector(7, 157, 113)));    
    return fract(vector(2097152, 262144, 32768)*n); 
}

float voronoi(vector p){

	vector b, r, g = floor(p);
	p = fract(p); 
	float d = 1.; 
     
	for(int j = -1; j <= 1; j++) {
	    for(int i = -1; i <= 1; i++) {
    		
		    b = vector(i, j, -1);
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    		
		    b[2] = 0.0;
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    		
		    b[2] = 1.;
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    			
	    }
	}
	
	return d; 
}

float noiseLayers( vector p, float Time) {
    vector t = vector(0., 0., p[2]+Time*1.5);
    int iter = 5; 
    float tot = 0., sum = 0., amp = 1.; 
    for (int i = 0; i < iter; i++) {
        tot += voronoi(p + t) * amp; 
        p *= 2.0; 
        t *= 1.5; 
        sum += amp; 
        amp *= 0.5; 
    }
    
    return tot/sum; 
}

shader Combustible_Voronoi( 

   point Po = P,
   float Time  = 0,
   output vector Out = 0,
     )
{
	vector uv = Po-0.5;

	uv += vector(sin(Time*0.5)*0.25, cos(Time*0.5)*0.125,0.0);
	vector rd = normalize(vector(uv[0], uv[1], 3.1415926535898/8.));
	float cs = cos(Time*0.25), si = sin(Time*0.25);
    matrix mat2 = matrix( cs,-si,0,0,     si,cs,0,0,     0,0,0,0,     0,0,0,0 );
	
	rd = transform ( mat2, rd ); 
	float c = noiseLayers(rd*2.,Time);
	c = max(c + dot(hash33(rd)*2.-1., vector(0.015)), 0.);

    c *= sqrt(c)*1.5; // Contrast.
    vector col = firePalette(c); 
    vector colzyx = vector ( col[2],col[1],col[0] );
    
    col = mix(col, colzyx*0.15+c*0.85, min(pow(dot(rd, rd)*1.2, 1.5), 1.)); // Color dispersion.
    col = pow(col, vector(1.5));
	Out = vector(sqrt(clamp(col, 0., 1.)));
}
