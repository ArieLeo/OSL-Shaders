// Compiled by Mads DrÃ¸schler 2019

shader MadGenerator( 
	
	  string Filename = "uv-grid.png" 
  	[[ string widget="filename", 
  	   string label="File name",
  	   string help="The name of the texture to look up" ]], 


	point UV = P,
	float NormalStrength = 300,
	float NormalBlur = 1000,
	int    NormalFlipX   = 1   
  	[[ string widget="checkBox" ]],
  	int    NormalFlipY   = 1   
  	[[ string widget="checkBox" ]],
	output vector Normal = 0,
	output vector Cavity = 0,
	output vector Displcement = 0,
	output vector Reflection = 0,
)
{
	point uv = UV;
    u = uv[0];
    v = uv[1];
 
    
    // Normal Generator   
             
    float threshold = 0.085;
    float px = 1.0/NormalBlur;  // the bits
    float A = 1.0;
    vector rgb = texture(Filename, u , 1.0-v, "","", "alpha", A);
    vector bw = vector(1);
    vector bw2 = vector(1);

    vector rgbUp = texture(Filename, u , 1.0-v+px, "","", "alpha", A);
    vector rgbDown = texture(Filename, u , 1.0-v-px, "","", "alpha", A);
    vector rgbLeft = texture(Filename, u+px , 1.0-v, "","", "alpha", A);
    vector rgbRight = texture(Filename, u-px , 1.0-v+px, "","", "alpha", A);

    float rgbAvr = (rgb[0] + rgb[1] + rgb[2]) / 3.;
    float rgbUpAvr = (rgbUp[0] + rgbUp[1] + rgbUp[2]) / 3.;
    float rgbDownAvr = (rgbDown[0] + rgbDown[1] + rgbDown[2]) / 3.;
    float rgbLeftAvr = (rgbLeft[0] + rgbLeft[1] + rgbLeft[2]) / 3.;
    float rgbRightAvr = (rgbRight[0] + rgbRight[1] + rgbRight[2]) / 3.;

    float dx = abs(rgbRightAvr - rgbLeftAvr);
    float dy = abs(rgbUpAvr - rgbDownAvr);
    
    if (dx > threshold)
        bw = vector(1);
    else if (dy > threshold)
        bw = vector(1);
    else
        bw = vector(0);
    
    Normal = 0.5 + 0.5*normalize( vector(-(rgbRightAvr - rgbLeftAvr), -(rgbUpAvr - rgbDownAvr), NormalStrength*px) );    ///swizzle xzy



	// Cavity
	
	// Derivatives
	float V = 0.000977;
	vector DerA = vector (V,0,0);
	vector DerB = vector (0,V,0);

	// Add Derivatives to UV
	vector VecADD  = uv + DerA; 
	vector VecADD2 = uv + DerB;
	
	// Subtract Derivatives from UV
	vector  VecSUB = uv - DerA;
	vector VecSUB2 = uv - DerB;
	
	// Constants and variable init
	color C1 = 0;color C2 = 0;color C3 = 0;color C4 = 0;
    
    // Bitmap lookup with intergrated UV derivatives
    C1  = texture(Filename,  VecADD[0], A-VecADD[1] ,"","","",A,"interp","linear");
	C2  = texture(Filename, VecADD2[0], A-VecADD2[1],"","","",A,"interp","linear");
	C3  = texture(Filename,  VecSUB[0], A-VecSUB2[1],"","","",A,"interp","linear");
    C4  = texture(Filename, VecSUB2[0], A-VecSUB2[1],"","","",A,"interp","linear");
   	
   	// Output - subtract channel 1&3 and 2&4, give both a ConstantBiasScale and multiply them
   	Cavity = (((C1[0] - C3[0])+1)*0.5)*(((C2[1] - C4[1])+1)*0.5);
    
}