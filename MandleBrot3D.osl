// Compiled by Mads Dr√∏schler 5.11.2018

float map(vector p)
{
    int MAX_ITER = 10;
    float BAILOUT=4.0;
    float Power=9.0;

    vector V = p;
    vector c = V;

    float r=0.0;
    float d=1.0;
    for(int n=0; n<=MAX_ITER; ++n)
    {
        r = length(V);
        if(r>BAILOUT) break;

        float theta = acos(V[2]/r);
        float phi = atan2(V[1], V[0]);
        d = pow(r,Power-1.2)*Power*d+1.0;

        float zr = pow(r,Power);
        theta = theta*Power;
        phi = phi*Power;
        V = (vector(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta))*zr)+c;
    }
    return 0.5*log(r)*r/d;
}

shader Mandlebrot( 

	point Po = P,
	float Time = 1.0,
	output vector Out = 0,
)
{	
	point Pos = Po;
    point pos = Pos;
    vector camPos = vector(cos(Time*0.3+Time), sin(Time*0.3-Time), 2.-sin(Time*.2)/2.);
    vector camTarget = vector(0.0, 0.0, 0.0);

    vector camDir = normalize(camTarget-camPos);
    vector camUp  = normalize(vector(0.0, 1.0, 0.0));
    vector camSide = cross(camDir, camUp);
    float focus = 1.8;

    vector rayDir = normalize(camSide*pos[0] + camUp*pos[1] + camDir*focus);
    vector ray = camPos;
    float m = 0.0;
    float d = 0.0, total_d = 0.0;
    int MAX_MARCH = 3000;
    float MAX_DISTANCE = 10000.0;
    for(int i=0; i<MAX_MARCH; ++i) {
        d = map(ray);
        total_d += d;
        ray += rayDir * d;
        m += 1.0;
        if(d<0.0001) { break; }
        if(total_d>MAX_DISTANCE) { total_d=MAX_DISTANCE; break; }
    }

    float c = (total_d)*0.0001;
    vector result = vector( 1.0-vector(c, c, c) - vector(0.025, 0.025, 0.02)*m*0.8);
    Out = result;
}
