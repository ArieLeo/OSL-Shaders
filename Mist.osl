// OSL Compiled by Mads Dr√∏schler 5.11.2018

	float fract ( float x ) {
	return x - floor ( x) ; }

vector fract ( vector x ) {
	return x - floor ( x) ; }


float n21 (vector uvw)
{
    return fract(sin(uvw[0]*23.35661 + uvw[1]*6560.65 + uvw[2]*4624.165)*2459.452);
}

float smoothNoise (vector uvw)
{
    float fbl = n21(floor(uvw));
    float fbr = n21(vector(1.0,0.0,0.0)+floor(uvw));
    float ful = n21(vector(0.0,1.0,0.0)+floor(uvw));
    float fur = n21(vector(1.0,1.0,0.0)+floor(uvw));
    
    float bbl = n21(vector(0.0,0.0,1.0)+floor(uvw));
    float bbr = n21(vector(1.0,0.0,1.0)+floor(uvw));
    float bul = n21(vector(0.0,1.0,1.0)+floor(uvw));
    float bur = n21(vector(1.0,1.0,1.0)+floor(uvw));
    
    uvw = fract(uvw);
    vector blend = uvw;
    blend = (blend*blend*(3.0 -2.0*blend)); // cheap smoothstep
    
    return mix(	mix(mix(fbl, fbr, blend[0]), mix(ful, fur, blend[0]), blend[1]),
        		mix(mix(bbl, bbr, blend[0]), mix(bul, bur, blend[0]), blend[1]),
               	blend[2]);
}

float perlinNoise (vector uvw)
{
    float blended = smoothNoise(uvw*4.0);
    blended += smoothNoise(uvw*8.0)*0.5;
    blended += smoothNoise(uvw*16.0)*0.25;
    blended += smoothNoise(uvw*32.0)*0.125;
    blended += smoothNoise(uvw*64.0)*0.0625;
    
    blended /= 2.0;
    blended *= pow(0.8-abs(uvw[1]),2.0);
    return blended;
}

shader Mist( 

	point Po = P,
	float Time = 0,
	output vector Out =0,
   )
{
    vector uv = Po-0.5;
	
    
    vector uvw = vector(uv[0], uv[1], Time*0.14);
    
    vector result = vector(0.0);
    float moreDepth = 0.0;
    
    for(int i=0;i<20;i++)
    {
        moreDepth += 0.008;
        result += 		vector(perlinNoise(uvw*vector(vector(moreDepth*12.0+1.0)) + vector(0.0,0.0, moreDepth)));
    }
    result /= 14.0;
    vector uvwxy = uvw;
    uvwxy[2] = 0;
    result *= 2.4*(0.6-length(uvwxy));
    
    Out = vector(result * vector(0.8,0.9,1.0)*1.0 + vector(0.2,0.3,0.4)*(0.9-abs(uv[1])));
    Out = pow(Out,2.2);
}