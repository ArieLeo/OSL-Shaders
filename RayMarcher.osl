//Org Brandon Fogerty
// OSL version Mads Dr√∏schler
// Compiled 5.11.2018
// License: https://creativecommons.org/licenses/by-nc-sa/3.0/

float sphere( vector p, float radius )
{
    return length( p ) - radius;
}

float map( vector p )
{    
    return sphere( p, 3.0 );
}

vector getNormal( vector p )
{
    vector e = vector( 0.001, 0.000, 0.000 );
    vector f = vector( 0.000, 0.001, 0.000 );
    vector g = vector( 0.000, 0.000, 0.001 );  
    float deltaX = map( p + e ) - map( p - e );
    float deltaY = map( p + f ) - map( p - f );
    float deltaZ = map( p + g ) - map( p - g );
    
    return normalize( vector( deltaX, deltaY, deltaZ ) );
}

float Trace( vector origin, vector direction, vector p )
{
    float totalDistanceTraveled = 0.0;
    for( int i=0; i <32; ++i)
    {
        p = origin + direction * totalDistanceTraveled;
        float distanceFromPointOnRayToClosestObjectInScene = map( p );
        totalDistanceTraveled += distanceFromPointOnRayToClosestObjectInScene;
        if( distanceFromPointOnRayToClosestObjectInScene < 0.001 )
        {
            break;
        }
        if( totalDistanceTraveled > 10000.0 )
        {
            totalDistanceTraveled = 0.0000;
            break;
        }
    }
    return totalDistanceTraveled;
}
float calculateRampCoefficient( float t, int stripeCount )
{
    float fStripeCount = float(stripeCount);
    float modifiedT = mod( floor( t * fStripeCount ), fStripeCount );
    float rampCoefficient = mix( 0.0, 1.0, modifiedT / (fStripeCount-1.0) );
    return rampCoefficient;
}

vector calculateLighting(vector pointOnSurface, vector surfaceNormal, vector lightPosition, vector cameraPosition)
{
    vector fromPointToLight = normalize(lightPosition - pointOnSurface);
    float diffuseStrength = clamp( dot( surfaceNormal, fromPointToLight ), 0.0, 1.0 );   
    diffuseStrength = calculateRampCoefficient( diffuseStrength, 4 );
    vector diffuseColor = diffuseStrength * vector( 1.0, 0.0, 0.0 );
    vector reflectedLightVector = normalize( reflect( -fromPointToLight, surfaceNormal ) );   
    vector fromPointToCamera = normalize( cameraPosition - pointOnSurface );
    float specularStrength = pow( clamp( dot(reflectedLightVector, fromPointToCamera), 0.0, 1.0 ), 10.0 );
    specularStrength = calculateRampCoefficient(specularStrength, 4);
    specularStrength = min( diffuseStrength, specularStrength );
    vector specularColor = specularStrength * vector( 1.0,0,0 );
    vector finalColor = diffuseColor + specularColor; 
    if( dot( fromPointToCamera, surfaceNormal ) < 0.2 )
    {
        finalColor = vector( 0.0,0,0 );
    }
    
    return finalColor;
}

shader RayMarcher( 

	point Po = P,
	float Time = 1.0,
	output vector Out = 0,
) 
{
    point uv = Po;
    vector cameraPosition = vector( 0.0, 0.0, -10.0 );
    vector cameraDirection = normalize( vector( uv[0], uv[1], 1.0) );
    vector pointOnSurface;
    float distanceToClosestPointInScene = Trace( cameraPosition, cameraDirection, pointOnSurface );
    vector finalColor = vector(0.7,0,0);
    if( distanceToClosestPointInScene > 0.0 )
    {
        float lx = mix( -1.5, 1.5, sin(Time) * 0.5 + 0.5);
        float ly = 3.0 + mix( -1.5, 1.5, sin(Time * 1.3) * 0.5 + 0.5);
        vector lightPosition = vector( lx, ly, -10.0 );
        vector surfaceNormal = getNormal( pointOnSurface );
        finalColor = calculateLighting( pointOnSurface, surfaceNormal, lightPosition, cameraPosition );
    }
    Out = vector( finalColor);
}


