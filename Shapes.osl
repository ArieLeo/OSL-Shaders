// Compiled after a small session between Martin Breidt & Mads DrÃ¸schler
// Based on a GL I can't remember the name on the Author.
// 14.10.2018
// License: https://creativecommons.org/licenses/by-nc-sa/3.0/

// Planned, lose external tiling feature and add internally
// Local rotation in the shader directly ( same as above, exluding an UVtransform node )
// Experiment with vert chamfering weight

float lPolygon(vector p, int n)
{
	float a = atan2(p[0], p[1]) + M_PI;
	float r = 2*M_PI/float(n);
	return cos(floor(0.5 + a/r) * r - a) * length(p);
}

shader Shapes
(
	point Po = point(u, v, 0),
	int nSides = 3
		[[ string help = "Number of polygon sides",
		int min = 3 ]] ,  
	float Softness = 0.09
		[[ float min = 0.0 ]] ,  
	float Radius = 0.4
		[[ float min = 0.001 ]] ,  
	float Stretch_U = 1.0,
	float Stretch_V = 1.0,	
	float Star_Effect = 1.0
				[[ string help = "A value > 0 will cause the shape to become more star-like along the W coordinate"]],
	vector Offset = 0.0
				[[ string help = "Translation of pattern. Use a Z value > 0 to move towards a star-like pattern"]],
	color Color_Shape = color(1),
	color Color_Background = color(0),
	output color Out = 0,
	output color Outt = 0,
)
{
	vector p = abs(Po-floor(Po));		
	p = p - vector(0.5, 0.5, 0);
	
	p = (p - Offset) *  vector(Stretch_U, Stretch_V, Star_Effect )/ Radius;
	float d = lPolygon(p, int(mod(nSides-3, 60.)+3.));
	Out = color(smoothstep(Radius, Radius+Softness, d)); 
	Out = (1-Out)*Color_Shape+(Out*Color_Background);  // added colors for shape and background //Mads
	
}
