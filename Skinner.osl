
float wave(vector uv, vector emitter, float speed, float phase, float timeshift){
	float dst = distance(uv, emitter);
	return pow(2.7, sin(dst * phase - (timeshift) * speed));
}
vector wavedrag(vector uv, vector emitter){
	return normalize(uv - emitter);
}
float getwaves(vector position){
    float iter = 0.0;
    float phase = 6.0;
    float speed = 2.0;
    float weight = 1.0;
    float w = 0.0;
    float ws = 0.0;
    float iwaterspeed = 1.0;
    for(int i=0;i<123;i++){
        vector p = vector(sin(iter), cos(iter),0) * 300.0;
        float res = wave(position, p, speed, phase, 0.0) * 0.3;
        float res2 = wave(position, p, speed, phase, 0.006) * 0.3;
        position -= wavedrag(position, p) * (res - res2) * weight * 5.0 * iwaterspeed;
        w += res * weight;
        iter += 12.0;
        ws += weight;
        weight = mix(weight, 0.0, 0.12);
        phase *= 1.2;
        speed = pow(speed, 1.014);
    }
    return w / ws;
}

shader Skinner( 
	
	 	point Po = P,
	output color Out =0,
	 	 	
	 	 	 	 	 	 ) {	
	point Pos = Po;
	
	float w = getwaves(Pos);
	Out = vector( 1.0 - w*vector(.88-w*.25,1.2,1.3)*1.5);

}