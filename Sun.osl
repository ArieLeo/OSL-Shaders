// Compiled by Mads Dr√∏schler 5.11.2018

float fract ( float x ) 
{
	return x - floor (x);
}

vector fract ( vector x ) 
{
	return x - floor (x);
}

float squareNoise( vector x )
{
	return cos(x[0]) * sin(x[1]);
}

float fbm6( vector p )
{
    float f = 0.0;
    matrix m = matrix( 1.20,  0.80,0,0, -0.80,  1.20,0,0,0,0,0,0,0,0,0,0 );
    f += 0.500000 * (0.5+0.5*squareNoise( p )); p = transform(m, p * 2.02);
    f += 0.250000 * (0.5+0.5*squareNoise( p )); p = transform(m,p * 2.03);
    f += 0.125000 * (0.5+0.5*squareNoise( p )); p = transform(m,p * 2.01);
    return f / 0.96875;
}

float r(float n)
{
 	return fract(cos(n*72.42)*173.42);
}

vector r(vector n)
{
 	return vector(r(n[0]*63.62-234.0+n[1]*84.35),r(n[0]*45.13+156.0+n[1]*13.89),0); 
}

float voronoi2D(vector n)
{
    float dis = 2.0;
    for (int y= -1; y <= 1; y++) 
    {
        for (int x= -1; x <= 1; x++) 
        {
            vector p = floor(n) + vector(x,y,0);

            float d = length(r(p) + vector(x, y,0) - fract(n));
            if (dis > d)
            {
             	dis = d;   
            }
        }
    }
    
    return 1.0 - dis;
}

float fbm4( vector p )
{
    float f = 0.0;
    matrix m = matrix( 1.20,  0.80,0,0, -0.80,  1.20,0,0,0,0,0,0,0,0,0,0 );
    f += 0.5000 * voronoi2D( p ); p = transform(m,p* 2);
    f += 0.2500 * voronoi2D( p ); p = transform(m,p* 2);
    f += 0.1250 * voronoi2D( p ); p = transform(m,p* 2);
    f += 0.0625 * voronoi2D( p );
    return f;
}

float GetFBM( vector q,  vector ron, float Time)
{
    matrix m = matrix( 1.20,  0.80,0,0, -0.80,  1.20,0,0,0,0,0,0,0,0,0,0 );
    float ql = length( transform(m,q) );
    vector o;
    o = vector(fbm4(vector(0.5 * ql - Time) + fbm6( vector(2.0 * q + vector(q)))));
    vector n;
    n = vector(fbm4(q + fbm6( vector(2.0 * o + vector(o)))));
    vector p = 4.0 * o + 6.0 * n;
    float f = 0.5 + 0.5 * fbm6(p);
    f = mix( f, f * f * f * 3.5, f * abs(n[1]));
    f *= 1.0 - 0.5 * pow( f, 8.0 );
	ron = vector( o[0],o[1], n[0] );
    return f;
}

vector GetColor(vector p, float Time)
{
    vector on = vector(0.0);    
    float f = GetFBM(p, on, Time);    
    vector col = vector(0.0);
    col = mix( vector(0.78, 0.45, 0.06), vector(0.35, 0.0, 0.4), f );
    col = mix( col, vector( 0.81, 0.55, 0.0), dot(vector(on[0],on[1],0), vector(on[2],on[2],0)));
    return col * col * 4. * 0.4545;
}

shader Sun( 
point Po = P,
float Time = 0,
output vector Out = 0,
  )
{
  	vector p = Po;
    p *= 5.;
    vector col = GetColor(p,Time);
    float gamma = 1/2.2;
    Out = pow(vector(col), vector(1.0/gamma));
}
