// TextureShuffle.ols 
// By Mads Dr√∏schler
// compiled 10.4.2019
// Build 0.01c
// LICENSE: The MIT License.

// Currently semi broken, lots of control features missing.

// This shader rearranges texture inputs with no visible seams.
// The result is a variation of the original texture, maintaining look and flow, while being completly different.


float fract(float x)
{
	return x-floor(x);
}

float sum(vector V) 
{ 
	return V[0]+V[1]+V[2]; 
}

vector Maps(vector x,float V,string WeightMap,string Texture,float Size)
{
    color kcol = texture(WeightMap,Size*x[0],1-Size*x[1]);
    float k = kcol[0];
    float l = k*8.0;
    float i = floor(l);
    float f = fract(l);
    
    vector offa = sin(vector(16.0,26.0,0.0)*(i+0.0)); // hash
    vector offb = sin(vector(16.0,26.0,0.0)*(i+1.0)); // hash
	vector UVa = x+V*offa;
    vector UVb = x+V*offb;
    vector cola = texture(Texture,UVa[0],1-UVa[1]);
    vector colb = texture(Texture,UVb[0],1-UVb[1]);
    
    return mix(cola,colb,smoothstep(0.2,0.8,f-0.1*sum(cola-colb)));
}

shader TextureShuffle( 

 point Po = P
 [[ string label = "UV Map",
 	string help = "UV Map, use a UVW Map or UV Transform" ]],
 
 float Size = 0.013,
 string Texture = "",
 string WeightMap = "",
 output color Out = 0,
)
{
	float Time = 0.472;
	vector uv = vector(Po[0],Po[1],0);
	uv = abs(uv-floor(uv));
	uv[0] *= 0.06;	
	uv[1] *= 0.06;
	uv[0] += 0.02;	
	uv[1] += 0.02;
		
	float f = smoothstep(0.4,0.6,sin(Time));
    float s = smoothstep(0.4,0.6,sin(Time*2));
        
	vector col = Maps((4.0+6.0*s)*uv,f,WeightMap,Texture,Size);
	
	Out = color(col);
	Out = pow(Out,2.2);
}