// TileNoise.osl
// Version 0.7a 
// Last compiled 1. July 2019 by Mads Dr√∏schler
// LICENSE: https://creativecommons.org/licenses/by-nc-sa/3.0/
// Based on and extended from Dave_Hoskins Tileable Noise https://www.shadertoy.com/view/4dlGW2
// Original is 82 lines. 
// The OSL version is currently 259 lines.



float fract (float x)
{
	return x-floor(x);
}

vector fract (vector x)
{
	return x-floor(x);
}

float Hash( output vector p, float scale)
{
	p = mod(p, scale);
	
	return fract(sin(dot(p, vector(27.16, 38.90,0))) * 51.53);
}

float Hash2(output vector p, float scale)
{
	p = mod(p, scale);
	
	return fract(sin(dot(p, vector(27.15, 38.91, 49.20))) * 51.54);
}

float Noise(output vector p, float scale)
{
	vector f;
	p *= scale;
	f = fract(p);
    p = floor(p);
    f = f*f*(3.0-2.0*f); 
    
    float res = mix(mix(Hash(p, 				 	 scale),
						Hash(p + vector(1.0, 0.0,0), scale), f[0]),
					mix(Hash(p + vector(0.0, 1.0,0), scale),
						Hash(p + vector(1.0, 1.0,0), scale), f[0]), f[1]);
    return res;
}

float Noise2(output vector p, float scale)
{
    vector f;
	p *= scale;	
	f = fract(p);
    p = floor(p);	
    f = f*f*(3.0-2.0*f); 	
    
    float resA = mix(mix(Hash2(p + vector(0.0, 0.0, 0.0), scale),
						 Hash2(p + vector(1.0, 0.0, 0.0), scale), f[0]),
					 mix(Hash2(p + vector(0.0, 1.0, 0.0), scale),
					     Hash2(p + vector(1.0, 1.0, 0.0), scale), f[0]), f[1]);
    
    float resB = mix(mix(Hash2(p + vector(0.0, 0.0, 1.0), scale),
						 Hash2(p + vector(1.0, 0.0, 1.0), scale), f[0]),
					 mix(Hash2(p + vector(0.0, 1.0, 1.0), scale),
					   	 Hash2(p + vector(1.0, 1.0, 1.0), scale), f[0]), f[1]);
    
    return mix(resA,resB,f[2]);
}


float fBm5 (output vector p, output float intScale, output float amp)
{
	float f = 0.0;
    p = mod(p, intScale);
	
	for (int i = 0; i < 5; i++) {
		f += Noise2(p, intScale) * amp;
		amp *= .5;
		intScale *= 2.;
	}
    
	return min(f, 1.0);
}

vector hash3( output vector p, int shuffle )
{
	float a = shuffle*2.51;
	float b = shuffle*3.47;
	float c = shuffle*4.12;
	
    p = vector(dot(p,vector(a,b,c)),
               dot(p,vector(269.5,183.3,120.0)),
               dot(p,vector(69.4,583.3,520.0))
              );
    
    return fract(sin(p)*18.54);
}


float wrap(float n, float period)
{
    return n >= 0.0 ? mod(n,period) : period + n;
}

vector voronoi( vector x, float per, int shuffle)
{
    vector n = floor( x );
    vector f = fract( x );
	vector m = vector( 8.0 );
	
    for( int k=-1; k<=1; k++ )
    for( int j=-1; j<=1; j++ )
    for( int i=-1; i<=1; i++ )
    
    {
        vector g = vector( float(i), float(j), float(k) );
        vector gn = n + g; 
        gn[0] = wrap(gn[0],per);
        gn[1] = wrap(gn[1],per);
        gn[2] = wrap(gn[2],per);
        vector o = hash3(gn,shuffle);
        vector  r = g - f + o;
		float d = dot( r, r );
        if( d<m[0] )
            m = vector( d, o[0],o[1] );
    }

    return vector( sqrt(m[0]), m[1]+m[2],0 );
}


float billows(output vector p, output float intScale, output float amp, int billowIter, int shuffle)
{
    float f = 0.0;
    p = mod(p, intScale);
	
	for (int i = 0; i < billowIter; i++) {
		vector voroset =voronoi(p * intScale, intScale,shuffle);
		f += voroset[0] * amp;
		amp *= .5;
		intScale *= 2.;
	}
    
	return min(f, 1.0);
}

shader TileNoise
	[[
		string label = 	"TileNoise",
		string help = 	"<h1><b>Tile Noise</b></h1>"
						"build 0.5a<br><br><b>"
						"This shader tiles seamlessly over UV borders</b><br>"
						"<br>Examples and descriptions?", 
		string URL =	"https://www.masd.dk/osl_shader_tile_noise/"
						

 		 ]]
( 
	point uv_input = P
	[[ 	string label = "UV input",
		string help = "Plug a UV channel in here, or a UV Transform to control position and orientation. <b>Tip</b>, you can use textures and noise maps in junction with a linear UV map to create interesting effects" ]]
	,
 	int voronoi_details = 5
 	[[
 	 	string label = 	"Voronoi details",
 		string help = 	"Increase or decrease the amount of voronoi detail passes.<ul>"
 						"<li>Low (1-2) returns a simpler structure."
 						"<li>4 and higher returns finer details.<br>"
 						"<br>At a certain point, 6 or over, you wont see much difference from the distance." 
 						"</ul>",
 		int min =		0
 	]], 	
 	
 	int voronoi_scale = 4
 	[[ 
 		string label = 	"Voronoi scale",
 		string help = 	"Scale the Voronoi pattern up or down." 
 	]],
 	
 	float voronoi_amplitude = 0.6
 	[[
 		string label =	"Voronoi amplitude",
 		string help =	"The amplitude of the voronoi pattern."
 	]],
 	
 	float voronoi_gamma = 1.6
 	[[
 		string label =	"Voronoi gamma",
 		string help =	"Gamma correct the voronoi pattern."
 	]],
 	
 	
 	int perlin_scale = 6 
 	[[ 
 		string label =	"Perlin scale",
 		string help = 	"Scales the perlin noise up or down.<br>"
 						"<br><b>WARNING!</b><br>"
 						"Do not wire a float channel to this slot, only integers will work due to the nature of the internal mechanisms."
 	]],
 	
 	float perlin_amplitude = 0.6
 	[[
 		string label =	"Perlin amplitude",
 		string help =	"The amplitude of the perlin noise."
 	]],
 	
 	float mix_amount = 0.5
 	[[ 
 		string label =	"Mix amount",
 		string help = 	"Mix strength between noise and voronoi.<ul>"
 						"<li>0.0 = Perlin noise."
 						"<li>0.5 = A mix of Perlin and Voronoi."
 						"<li>1.0 = Voronoi pattern.<br>"
 						"<br><b>Tip:</b> You can use a non-linear input to generate variation in the mix.<br>For example the Red channel of a texture or a float value ( a noise )."
 						"</ul>",
 		float min = 0.0,
 		float max = 1.0,
 	]],
 	
 	float warp_amount = 10.0
 	[[
 		string label =	"Warp amount",
 		string help = 	"Warp scale between the Perlin noise and the Voronoi pattern"
 	]],
 	
 	float gamma = 2.2 
 	[[ 
 		string label =	"Gamma",
 		string help =	"Global gamma correction"
 	]],	
 	
 	int shuffle = 12345
	[[ 	
		string label =	"Shuffle",
		string help = 	"Quickly generate a new variant."
	]]	,
 	
 	output color Out = 0,
   
   )
{
		
    point p = vector(uv_input[0],uv_input[1],uv_input[2]);
    
    float vs = voronoi_scale;
    float va = voronoi_amplitude;
    float vg = voronoi_gamma;
    float ps = perlin_scale;
    float pa = perlin_amplitude;
    float wa = 1.0/warp_amount;
    float bil = 1.0 - pow(billows(p,vs,va,voronoi_details,shuffle),vg);
    float per = fBm5(p+vector(bil * wa),ps,pa);
   	float fin = mix(per,bil,mix_amount);
   	
	Out = color(fin);
	Out = pow(Out,gamma);
	
}
