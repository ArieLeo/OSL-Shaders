// Protean clouds by nimitz (twitter: @stormoid)
// https://www.shadertoy.com/view/3l23Rh


// Ported to OSL by Mads Dr√∏schler 11.6.2019
// No feature sets exposed in the UI currently.
// Compiled in MAX 2020. I Dont belive this will work in 2019 in current state.



// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
// Contact the author for other licensing options

/*
	Technical details:

	The main volume noise is generated from a deformed periodic grid, which can produce
	a large range of noise-like patterns at very cheap evalutation cost. Allowing for multiple
	fetches of volume gradient computation for improved lighting.

	To further accelerate marching, since the volume is smooth, more than half the the density
	information isn't used to rendering or shading but only as an underlying volume	distance to 
	determine dynamic step size, by carefully selecting an equation	(polynomial for speed) to 
	step as a function of overall density (not necessarialy rendered) the visual results can be 
	the	same as a naive implementation with ~40% increase in rendering performance.

	Since the dynamic marching step size is even less uniform due to steps not being rendered at all
	the fog is evaluated as the difference of the fog integral at each rendered step.

*/




#include <vector2.h>
#define vec2 vector2
#define vec3 vector
#include <vector4.h>
#define vec4 vector4

matrix rot(float a)
{
	float c = cos(a), s = sin(a);
		return matrix(c,s,0,0,-s,c,0,0,0,0,0,0,0,0,0,0);
}

float mag2(vec2 p)
{
	return dot(p,p);
}

float linstep(float mn, float mx, float x)
{ 
	return clamp((x - mn)/(mx - mn), 0., 1.); 
}

vec2 disp(float t)
{ 
	return vec2(sin(t*0.22)*1., cos(t*0.175)*1.)*2.;
}

vec2 map(output vec3 p, float Time)
{
    vec3 p2 = p;
    
    vec2 p2disp = disp(p[2]); 
    vec2 p2xy = vec2(p2[0],p2[1])-p2disp;
    p2 = vec3(p2xy.x,p2xy.y,p2[2]);
    
    float prm1 = 0;
    
    vec3 pxy = transform(rot(sin(p[2]+Time)*(0.1 + prm1*0.05) + Time*0.09),vec3(p[0],p[1],0));
    p = vec3(pxy[0],pxy[1],p[2]);
    
      
    float cl = mag2(vec2(p2[0],p2[1]));
    float d = 0.;
    p *= .61;
    float z = 1.;
    float trk = 1.;
    float dspAmp = 0.1 + prm1*0.2;
    for(int i = 0; i < 5; i++)
    {
		p += sin(vec3(p[2],p[0],p[1])*0.75*trk + Time*trk*.8)*dspAmp;
        d -= abs(dot(cos(p), sin(vec3(p[1],p[2],p[0])))*z);
        z *= 0.57;
        trk *= 1.4;
        matrix m3 = matrix(0.33338, 0.56034, -0.71817,0, -0.87887, 0.32651, -0.15323,0, 0.15162, 0.69596, 0.61339,0,0,0,0,0)*1.93;

        p = transform(m3,p);
    }
    vec2 bsMo = vec2(0,0); // bsMo
    d = abs(d + prm1*3.)+ prm1*.3 - 2.5 + bsMo.y;
    return vec2(d + cl*.2 + 0.25, cl);
}

vec4 render( vec3 ro, vec3 rd, float Time )
{
	vec4 rez = vec4(0,0,0,0);
    float ldst = 8.;
    vec2 disP = disp(Time + ldst)*0.5;
	vec3 lpos = vec3(disP.x,disP.y, Time + ldst);
	float t = 1.5;
	float fogT = 0.;
	for(int i=0; i<130; i++)
	{
		if(rez.w > 0.99)break;

		vec3 pos = ro + t*rd;
        vec2 mpv = map(pos,Time);
		float den = clamp(mpv.x-0.3,0.,1.)*1.12;
		float dn = clamp((mpv.x + 2.),0.,3.);
        
		vec4 col = vec4(0,0,0,0);
        if (mpv.x > 0.6)
        {
        	vec3 colz = sin(vec3(5.,0.4,0.2) + mpv.y*0.1 +sin(pos[2]*0.4)*0.5 + 1.8)*0.5 + 0.5;
            col = vec4(colz[0],colz[1],colz[2],0.08);
            col *= den*den*den;
			vec3 colrgb = vec3(col.x,col.y,col.z);
			colrgb *= linstep(4.,-2.5, mpv.x)*2.3;
            col = vec4(colrgb[0],colrgb[1],colrgb[2],col.w);
            
            vec2 maps = map(pos+.8,Time);
            float dif =  clamp((den - maps.x)/9., 0.001, 1. );
            
            vec2 mapss = map(pos+.35,Time);
            dif += clamp((den - mapss.x)/2.5, 0.001, 1. );
            
            vec3 colxyz = vec3(col.x,col.y,col.z);
            colxyz *= den*(vec3(0.005,.045,.075) + 1.5*vec3(0.033,0.07,0.03)*dif);
        	col = vec4(colxyz[0],colxyz[1],colxyz[2],col.w);
        }
		
		float fogC = exp(t*0.2 - 2.2);
		col += vec4(0.06,0.11,0.11, 0.1)*clamp(fogC-fogT, 0., 1.);
		fogT = fogC;
		rez = rez + col*(1. - rez.w);
		t += clamp(0.5 - dn*dn*.05, 0.09, 0.3);
	}
	return clamp(rez, 0.0, 1.0);
}

float getsat(vec3 c)
{
    float mi = min(min(c[0], c[1]), c[2]);
    float ma = max(max(c[0], c[1]), c[2]);
    return (ma - mi)/(ma+ 1e-7);
}

vec3 iLerp(vec3 a,vec3 b, float x)
{
    vec3 ic = mix(a, b, x) + vec3(1e-6,0.,0.);
    float sd = abs(getsat(ic) - mix(getsat(a), getsat(b), x));
    vec3 dir = normalize(vec3(2.*ic[0] - ic[1] - ic[2], 2.*ic[1] - ic[0] - ic[2], 2.*ic[2] - ic[1] - ic[0]));
    float lgt = dot(vec3(1.0), ic);
    float ff = dot(dir, normalize(ic));
    ic += 1.5*dir*sd*ff*lgt;
    return clamp(ic,0.,1.);
}

shader Smoketunnel( 

 point Po = P,
 float Time = 0,
 output vector Out = 0,
  
   
    
      )
{	
	vec2 q = vec2(Po[0],Po[1]);
    vec2 p = (vec2(Po[0],Po[1]) - 0.5);
  
    
    float TTime = Time*3.;
    vec3 ro = vec3(0,0,TTime);
    
    ro += vec3(sin(Time)*0.5,sin(Time*1.)*0.,0);
        
    float dspAmp = .85;
    vec2 roxy = vec2(ro[0],ro[1]);
    roxy += disp(ro[2])*dspAmp;
    ro = vec3(roxy.x,roxy.y,ro[2]);
    
    float tgtDst = 3.5;
    vec2 DDisp = disp(TTime + tgtDst)*dspAmp;
    vec3 roDisp = vec3(DDisp.x,DDisp.y, TTime + tgtDst);
    vec3 target = normalize(ro - roDisp );

    vec3 rightdir = normalize(cross(target, vec3(0,1,0)));
    vec3 updir = normalize(cross(rightdir, target));
    rightdir = normalize(cross(updir, target));
	vec3 rd=normalize((p.x*rightdir + p.y*updir)*1. - target);
   
    vec3 rdxy = vec3(rd[0],rd[1],0);
    vec2 dDisp = -disp(TTime + 3.5);
    rdxy = transform(rot(dDisp.x*0.2 ),rdxy);
    rd = vec3(rdxy[0],rdxy[1],rd[2]);
    
   float prm1 = smoothstep(-0.4, 0.4,sin(Time*0.3));
	vec4 scn = render(ro, rd, TTime);
		
    vec3 col = vec3(scn.x,scn.y,scn.z);
    col = iLerp(vec3(col[2],col[1],col[0]), vec3(col[0],col[1],col[2]), clamp(1.-prm1,0.05,1.));
    
    col = pow(col, vec3(.55,0.65,0.6))*vec3(1.,.97,.9);

    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.12)*0.7+0.3; //Vign
    
	Out = vec3( col[0],col[1],col[2] );
	Out = pow(Out,2.2);
}
